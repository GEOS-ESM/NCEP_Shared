#
# Makefile for ESMA components.
#
# REVISION HISTORY:
#
# 03mar2004  Zaslavsky  Initial imlementation.
# 20Oct2004  da Silva   Standardization
# 29mar2005  da Silva   Added dependencies, cleaned up.
#

# Make sure ESMADIR is defined
# ----------------------------
ifndef ESMADIR
       ESMADIR := $(PWD)/../..
endif

# Compilation rules, flags, etc
# -----------------------------
  include $(ESMADIR)/Config/ESMA_base.mk  # Generic stuff
  include $(ESMADIR)/Config/ESMA_arch.mk  # System dependencies
#  include $(ESMADIR)/Config/GMAO_base.mk 

#                  ---------------------
#                  Standard ESMA Targets
#                  ---------------------


DIRN := $(shell basename $(PWD))
RN   := $(strip $(findstring r4,$(DIRN)) $(findstring r8,$(DIRN)))
IN   := $(strip $(findstring i4,$(DIRN)) $(findstring i8,$(DIRN)))

NLIB  = lib$(NTHIS).a
THIS  = $(NTHIS)_$(RN)$(IN)
LIB   = lib$(THIS).a
NLIB  = lib$(NTHIS).a
BINS  =

NREAL := $(FREAL)
NINT  := $(FINT)
ifeq ($(RN),r4)
      override FREAL = $(FREAL4)
      _RPREC = 4
else
      override FREAL = $(FREAL8)
      _RPREC = 8
endif
ifeq ($(IN),i4)
      override FINT = $(FINT4)
      _IPREC = 4
      _CLIB = CLIB4
else
      override FINT = $(FINT8)
      _IPREC = 8
      _CLIB = CLIB8
endif

fFLAGS = $(patsubst $(BIG_ENDIAN),,$(f90FLAGS))

# $(error RN=|$(RN)|, IN=|$(IN)|, FINT=|$(FINT)|, LIB=|$(LIB)|)

esma_install install: $(DEPS) $(LIB) $(BINS)
	$(MKDIR) $(ESMALIB) $(ESMAETC) $(ESMAINC)/$(THIS) $(ESMABIN)
	$(CP) -p *.a         $(ESMALIB)
	$(CP) -p *.mod       $(ESMAINC)/$(THIS)
#	$(CP) -p *.rc        $(ESMAETC)
#	$(CP) -p $(BINS)     $(ESMABIN)
ifeq ($(DIRN),$(r8i4))
	$(RM) -r $(ESMALIB)/$(NLIB) $(ESMAINC)/$(NTHIS)
	$(LN) -s $(ESMALIB)/$(LIB)  $(ESMALIB)/$(NLIB)
	$(LN) -s $(ESMAINC)/$(THIS) $(ESMAINC)/$(NTHIS)
endif


esma_clean clean:
	$(RM) *~ *.[aox] *.[Mm][Oo][Dd]

esma_distclean distclean:
	$(RM) *~ *.[aoxd] *.[Mm][Oo][Dd]

esma_doc doc:
	@echo "Target $@ not implemented yet in `pwd`"

esma_help help:
	@echo "Standard ESMA targets:"
	@echo "% make esma_install    (builds and install under ESMADIR)"
	@echo "% make esma_clean      (removes deliverables: *.[aox], etc)"
	@echo "% make esma_distclean  (leaves in the same state as cvs co)"
	@echo "% make esma_doc        (generates PDF, installs under ESMADIR)"
	@echo "% make esma_help       (this message)"
	@echo "Environment:"
	@echo "      ESMADIR = $(ESMADIR)"
	@echo "      BASEDIR = $(BASEDIR)"
	@echo "         ARCH = $(ARCH)"
	@echo "         SITE = $(SITE)"
	@echo "        FREAL = $(FREAL)"

#                  --------------------
#                  User Defined Targets
#                  --------------------

SRCS := baciof.f  bacio_module.f bafrio.f chk_endianc.f bacio.c byteswap.c
OBJS := $(addsuffix .o, $(basename $(SRCS)))
DEPS := $(addsuffix .d, $(basename $(SRCS))) \
        $(addsuffix .d, $(basename $(BINS))) 

FOPT = $(FOPT3)

INC_DIRS = . ..
MOD_DIRS = . ..
USER_CINCS  = $(foreach dir,$(INC_DIRS),$(I)$(dir)) 
USER_FINCS  = $(foreach dir,$(INC_DIRS),$(I)$(dir)) 
USER_FMODS  = $(foreach dir,$(MOD_DIRS),$(M)$(dir)) 
# RT: The following is a hack since I cannot find the reason why CFLAGS is not correct on entry
CFLAGS      = -O -I . -DLINUX -Dfunder -DFortranByte=char -DFortranInt=int -DFortranLlong='long long' -O3 -fPIC

USER_FDEFS = $(D)_RPREC=$(_RPREC) $(D)_IPREC=$(_IPREC) 
USER_CDEFS = $(D)_RPREC=$(_RPREC) $(D)_IPREC=$(_IPREC) $(D)$(_CLIB)

USER_FFLAGS = $(BIG_ENDIAN) 
 
vpath % $(INC_DIRS) 

$(LIB) lib : $(DEPS) $(OBJS)
	$(RM) $(LIB)
	$(AR) $(AR_FLAGS) $(LIB) $(OBJS)
	$(RANLIB) $(RANLIB_FLAGS) $(LIB)

%.x : $(LIB) %.o
	$(FC) $(LDFLAGS) -o $@ $*.o $(LIB) \
              $(LIB_MPEU) $(LIB_GFIO) $(LIB_SDF)

bacio.o : bacio.c
	@echo '---> Special handling of C code $<'
	$(CC) $(CFLAGS) -c $<

        # Bypass .c.d: rule, which won't produce bacio.v1.4.d, but only useless bacio.d
bacio.d : bacio.c
	@echo "Building dependency file" $@
	@echo "$@ : $<" >$@
	@echo "`basename $@ .d`.o : $<" >>$@

byteswap.o : byteswap.c
	@echo '---> Special handling of C code $<'
	$(CC) $(CFLAGS) -c $<

        # Bypass .c.d: rule, which won't produce bacio.v1.4.d, but only useless bacio.d
byteswap.d : byteswap.c
	@echo "Building dependency file" $@
	@echo "$@ : $<" >$@
	@echo "`basename $@ .d`.o : $<" >>$@

# For parallel install, baciof.o needs to depend on bacio_module.o
# to prevent race condition.

baciof.o: bacio_module.o

# Hack to prevent remaking dep files during cleaning
# --------------------------------------------------
  ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
    -include $(DEPS)
  endif

#.

!
! netCDF_Variable_Utility
!
! Module containing utility routines for netCDF file variable access.
!
!
! CREATION HISTORY:
!       Written by:   Paul van Delst, CIMSS/SSEC, 20-Nov-2000
!                     paul.vandelst@ssec.wisc.edu
!

MODULE netCDF_Variable_Utility

  ! ------------------
  ! Environment set up
  ! ------------------
  ! Modules used
  USE Type_Kinds,      ONLY: Byte, Short, Long, Single, Double
  USE Message_Handler, ONLY: SUCCESS, FAILURE, Display_Message
  USE netcdf
  ! Disable implicit typing
  IMPLICIT NONE


  ! ----------
  ! Visibility
  ! ----------
  PRIVATE
  PUBLIC :: Get_netCDF_Variable
  PUBLIC :: Put_netCDF_Variable


  ! ---------------------
  ! Procedure overloading
  ! ---------------------
  ! Functions to get variable data
  INTERFACE Get_netCDF_Variable
    ! Byte integer specific functions
    MODULE PROCEDURE get_scalar_Byte
    MODULE PROCEDURE get_rank1_Byte
    MODULE PROCEDURE get_rank2_Byte
    MODULE PROCEDURE get_rank3_Byte
    MODULE PROCEDURE get_rank4_Byte
    MODULE PROCEDURE get_rank5_Byte
    MODULE PROCEDURE get_rank6_Byte
    MODULE PROCEDURE get_rank7_Byte
    ! Short integer specific functions
    MODULE PROCEDURE get_scalar_Short
    MODULE PROCEDURE get_rank1_Short
    MODULE PROCEDURE get_rank2_Short
    MODULE PROCEDURE get_rank3_Short
    MODULE PROCEDURE get_rank4_Short
    MODULE PROCEDURE get_rank5_Short
    MODULE PROCEDURE get_rank6_Short
    MODULE PROCEDURE get_rank7_Short
    ! Long integer specific functions
    MODULE PROCEDURE get_scalar_Long
    MODULE PROCEDURE get_rank1_Long
    MODULE PROCEDURE get_rank2_Long
    MODULE PROCEDURE get_rank3_Long
    MODULE PROCEDURE get_rank4_Long
    MODULE PROCEDURE get_rank5_Long
    MODULE PROCEDURE get_rank6_Long
    MODULE PROCEDURE get_rank7_Long
    ! Single precision float specific functions
    MODULE PROCEDURE get_scalar_Single
    MODULE PROCEDURE get_rank1_Single
    MODULE PROCEDURE get_rank2_Single
    MODULE PROCEDURE get_rank3_Single
    MODULE PROCEDURE get_rank4_Single
    MODULE PROCEDURE get_rank5_Single
    MODULE PROCEDURE get_rank6_Single
    MODULE PROCEDURE get_rank7_Single
    ! Double precision float specific functions
    MODULE PROCEDURE get_scalar_Double
    MODULE PROCEDURE get_rank1_Double
    MODULE PROCEDURE get_rank2_Double
    MODULE PROCEDURE get_rank3_Double
    MODULE PROCEDURE get_rank4_Double
    MODULE PROCEDURE get_rank5_Double
    MODULE PROCEDURE get_rank6_Double
    MODULE PROCEDURE get_rank7_Double
    ! Character specific functions
    MODULE PROCEDURE get_scalar_Character
    MODULE PROCEDURE get_rank1_Character
    MODULE PROCEDURE get_rank2_Character
    MODULE PROCEDURE get_rank3_Character
    MODULE PROCEDURE get_rank4_Character
    MODULE PROCEDURE get_rank5_Character
    MODULE PROCEDURE get_rank6_Character
    MODULE PROCEDURE get_rank7_Character
  END INTERFACE Get_netCDF_Variable


  ! Functions to put variable data
  INTERFACE Put_netCDF_Variable
    ! Byte integer specific functions
    MODULE PROCEDURE put_scalar_Byte
    MODULE PROCEDURE put_rank1_Byte
    MODULE PROCEDURE put_rank2_Byte
    MODULE PROCEDURE put_rank3_Byte
    MODULE PROCEDURE put_rank4_Byte
    MODULE PROCEDURE put_rank5_Byte
    MODULE PROCEDURE put_rank6_Byte
    MODULE PROCEDURE put_rank7_Byte
    ! Short integer specific functions
    MODULE PROCEDURE put_scalar_Short
    MODULE PROCEDURE put_rank1_Short
    MODULE PROCEDURE put_rank2_Short
    MODULE PROCEDURE put_rank3_Short
    MODULE PROCEDURE put_rank4_Short
    MODULE PROCEDURE put_rank5_Short
    MODULE PROCEDURE put_rank6_Short
    MODULE PROCEDURE put_rank7_Short
    ! Long integer specific functions
    MODULE PROCEDURE put_scalar_Long
    MODULE PROCEDURE put_rank1_Long
    MODULE PROCEDURE put_rank2_Long
    MODULE PROCEDURE put_rank3_Long
    MODULE PROCEDURE put_rank4_Long
    MODULE PROCEDURE put_rank5_Long
    MODULE PROCEDURE put_rank6_Long
    MODULE PROCEDURE put_rank7_Long
    ! Single precision float specific functions
    MODULE PROCEDURE put_scalar_Single
    MODULE PROCEDURE put_rank1_Single
    MODULE PROCEDURE put_rank2_Single
    MODULE PROCEDURE put_rank3_Single
    MODULE PROCEDURE put_rank4_Single
    MODULE PROCEDURE put_rank5_Single
    MODULE PROCEDURE put_rank6_Single
    MODULE PROCEDURE put_rank7_Single
    ! Double precision float specific functions
    MODULE PROCEDURE put_scalar_Double
    MODULE PROCEDURE put_rank1_Double
    MODULE PROCEDURE put_rank2_Double
    MODULE PROCEDURE put_rank3_Double
    MODULE PROCEDURE put_rank4_Double
    MODULE PROCEDURE put_rank5_Double
    MODULE PROCEDURE put_rank6_Double
    MODULE PROCEDURE put_rank7_Double
    ! Character specific functions
    MODULE PROCEDURE put_scalar_Character
    MODULE PROCEDURE put_rank1_Character
    MODULE PROCEDURE put_rank2_Character
    MODULE PROCEDURE put_rank3_Character
    MODULE PROCEDURE put_rank4_Character
    MODULE PROCEDURE put_rank5_Character
    MODULE PROCEDURE put_rank6_Character
    MODULE PROCEDURE put_rank7_Character
  END INTERFACE Put_netCDF_Variable


  ! -----------------
  ! Module parameters
  ! -----------------

  ! Module RCS Id string
  CHARACTER( * ), PARAMETER :: MODULE_RCS_ID = &
    '$Id: netCDF_Variable_Utility.Header_and_Documentation,v 1.1 2006/06/08 21:47:55 wd20pd Exp $'


CONTAINS



!--------------------------------------------------------------------------------
!
! NAME:
!       Get_netCDF_Variable
!
! PURPOSE:
!       Function to retrieve a netCDF file variable by name.
!
!       This function is simply a wrapper for some of the NetCDF library
!       functions to simplify the retrieval of a variable data with error
!       checking.
!
! CALLING SEQUENCE:
!       Error_Status = Get_netCDF_Variable ( NC_FileID,                 &  ! Input
!                                            Variable_Name,             &  ! Input
!                                            Variable_Value,            &  ! Output
!                                            Start       = Start,       &  ! Optional input
!                                            Count       = Count,       &  ! Optional input
!                                            Stride      = Stride,      &  ! Optional input
!                                            Map         = Map,         &  ! Optional input
!                                            Variable_ID = Variable_ID, &  ! Optional Output
!                                            Message_Log = Message_Log  )  ! Error messaging
!
! INPUT ARGUMENTS:
!       NC_FileID:       File ID of a netCDF format file returned from a
!                        netCDF library OPEN call.
!                        UNITS:      N/A
!                        TYPE:       Integer
!                        DIMENSION:  Scalar
!                        ATTRIBUTES: INTENT(IN)
!
!       Variable_Name:   The data value(s) to be read. The data may be of any type
!                        and may be a scalar or an array of any rank. If the type
!                        of data differs from the netCDF variable type, type conversion
!                        will occur (if allowed). See Section 3.3, "Type Conversion"
!                        of the NetCDF User's Guide for Fortran 90 for details at:
!                        http://www.unidata.ucar.edu/packages/netcdf/f90/
!                        UNITS:      N/A
!                        TYPE:       CHARACTER
!                        DIMENSION:  Scalar
!                        ATTRIBUTES: INTENT(IN)
!
! OPTIONAL INPUT ARGUMENTS:
!       Start:           A vector of integers specifying the index in the variable
!                        from which the first (or only) of the data values will be
!                        read. The indices are relative to 1, so for example, the
!                        first data value of a variable would have index (1, 1, ..., 1).
!                        The elements of Start correspond, in order, to the variable's
!                        dimensions. Hence, if the variable is a record variable,
!                        the last index would correspond to the Starting record
!                        number for writing the data values.
!                        By default, Start(:) = 1.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Rank-1
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
!       Count:           A vector of integers specifying the number of indices
!                        selected along each dimension. To read a single value,
!                        for example, specify Count as (1, 1, ..., 1). The
!                        elements of Count correspond, in order, to the variable's
!                        dimensions. Hence, if the variable is a record variable,
!                        the last element of Count corresponds to a Count of the
!                        number of records to read.
!                        By default, Count(:numDims) = Shape(values) and
!                                    Count(numDims + 1:) = 1,
!                        where numDims = SIZE(SHAPE(values)).
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Rank-1
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
!       Stride:          A vector of integers that specifies the sampling interval
!                        along each dimension of the netCDF variable. The elements
!                        of the Stride vector correspond, in order, to the netCDF
!                        variable's dimensions (Stride(1) gives the sampling interval
!                        along the most rapidly varying dimension of the netCDF
!                        variable). Sampling intervals are specified in type-independent
!                        units of elements (a value of 1 selects consecutive elements
!                        of the netCDF variable along the corresponding dimension, a
!                        value of 2 selects every other element, etc.).
!                        By default, Stride(:) = 1.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Rank-1
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
!       Map:             A vector of integers that specifies the mapping between the
!                        dimensions of a netCDF variable and the in-memory structure
!                        of the internal data array. The elements of the index mapping
!                        vector correspond, in order, to the netCDF variable's dimensions
!                        (Map(1) gives the distance between elements of the internal
!                        array corresponding to the most rapidly varying dimension of
!                        the netCDF variable). Distances between elements are specified
!                        in units of elements.
!                        By default, edgeLengths = SHAPE(values), and
!                                    Map = (/ 1, (PRODUCT(edgeLengths(:i)), &
!                                             i = 1, SIZE(edgeLengths) - 1) /),
!                        that is, there is no mapping.
!                        Use of Fortran 90 intrinsic functions (including RESHAPE,
!                        TRANSPOSE, and SPREAD) may let you avoid using this argument.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Rank-1
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
!       Message_Log:     Character string specifying a filename in which any
!                        messages will be logged. If not specified, or if an
!                        error occurs opening the log file, the default action
!                        is to output messages to the screen.
!                        UNITS:      N/A
!                        TYPE:       CHARACTER(*)
!                        DIMENSION:  Scalar
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
! OUTPUT ARGUMENTS:
!       Variable_Value:  Value of the requested dimension. Note that for
!                        non-scalar character data, the declared string 
!                        length of the character variable _must_ be the
!                        same as that in the netCDF dataset.
!                        The integer and real kind types are defined in
!                        the TYPE_KINDS module.
!                        UNITS:      N/A
!                        TYPE:       CHARACTER         or
!                                    INTEGER( Byte )   or
!                                    INTEGER( Short )  or
!                                    INTEGER( Long )   or
!                                    REAL( Single )    or
!                                    REAL( Double )
!                        DIMENSION:  Scalar or array of any rank (up to 7)
!                        ATTRIBUTES: INTENT(OUT)
!
! OPTIONAL OUTPUT ARGUMENTS:
!       Variable_ID      NetCDF Id of the requested variable.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Scalar
!                        ATTRIBUTES: OPTIONAL, INTENT(OUT)
!                          
! FUNCTION RESULT
!       Error_Status:    The return value is an integer defining the error status.
!                        The error codes are defined in the Message_Handler module.
!                        If == SUCCESS the netCDF variable retrieval was successful
!                           == FAILURE an unrecoverable error occurred.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Scalar
!
!--------------------------------------------------------------------------------

!Insert_Get_netCDF_Variable




!--------------------------------------------------------------------------------
!
! NAME:
!       Put_netCDF_Variable
!
! PURPOSE:
!       Function to write a netCDF file variable by name.
!
!       This function is simply a wrapper for some of the NETCDF library
!       functions to simplify the writing of a variable data with error
!       checking.
!
! CATEGORY:
!       netCDF
!
! LANGUAGE:
!       Fortran-95
!
! CALLING SEQUENCE:
!       Error_Status = Put_netCDF_Variable ( NC_FileID,                 &  ! Input
!                                            Variable_Name,             &  ! Input
!                                            Variable_Value,            &  ! Input
!                                            Start       = Start,       &  ! Optional input
!                                            Count       = Count,       &  ! Optional input
!                                            Stride      = Stride,      &  ! Optional input
!                                            Map         = Map,         &  ! Optional input
!                                            Variable_ID = Variable_ID, &  ! Optional Output
!                                            Message_Log = Message_Log  )  ! Error messaging
!
! INPUT ARGUMENTS:
!       NC_FileID:       File ID of a netCDF format file returned from a
!                        netCDF library OPEN call.
!                        UNITS:      N/A
!                        TYPE:       Integer
!                        DIMENSION:  Scalar
!                        ATTRIBUTES: INTENT(IN)
!
!       Variable_Name:   The data value(s) to be read. The data may be of any type
!                        (except Character), and may be a scalar or an array of any
!                        rank. If the type of data differs from the netCDF variable
!                        type, type conversion will occur. See Section 3.3,
!                        "Type Conversion" of the NetCDF User's Guide for Fortran 90
!                        for details at:
!                        http://www.unidata.ucar.edu/packages/netcdf/f90/
!                        UNITS:      N/A
!                        TYPE:       CHARACTER(*)
!                        DIMENSION:  Scalar
!                        ATTRIBUTES: INTENT(IN)
!
!       Variable_Value:  The variable to be written.
!                        The integer and real kind types are defined in
!                        the TYPE_KINDS module.
!                        UNITS:      Variable
!                        TYPE:       CHARACTER         or
!                                    INTEGER( Byte )   or
!                                    INTEGER( Short )  or
!                                    INTEGER( Long )   or
!                                    REAL( Single )    or
!                                    REAL( Double )
!                        DIMENSION:  Scalar or array of any rank (up to 7)
!                        ATTRIBUTES: INTENT(IN)
!
! OPTIONAL INPUT ARGUMENTS:
!       Start:           A vector of integers specifying the index in the variable
!                        from which the first (or only) of the data values will be
!                        read. The indices are relative to 1, so for example, the
!                        first data value of a variable would have index (1, 1, ..., 1).
!                        The elements of Start correspond, in order, to the variable's
!                        dimensions. Hence, if the variable is a record variable,
!                        the last index would correspond to the Starting record
!                        number for writing the data values. 
!                        By default, Start(:) = 1.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Rank-1
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
!       Count:           A vector of integers specifying the number of indices
!                        selected along each dimension. To read a single value,
!                        for example, specify Count as (1, 1, ..., 1). The 
!                        elements of Count correspond, in order, to the variable's
!                        dimensions. Hence, if the variable is a record variable,
!                        the last element of Count corresponds to a Count of the
!                        number of records to read.
!                        By default, Count(:numDims) = shape(values) and
!                                    Count(numDims + 1:) = 1,
!                        where numDims = SIZE(SHAPE(values)).
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Rank-1
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
!       Stride:          A vector of integers that specifies the sampling interval
!                        along each dimension of the netCDF variable. The elements
!                        of the Stride vector correspond, in order, to the netCDF 
!                        variable's dimensions (Stride(1) gives the sampling interval
!                        along the most rapidly varying dimension of the netCDF
!                        variable). Sampling intervals are specified in type-independent
!                        units of elements (a value of 1 selects consecutive elements
!                        of the netCDF variable along the corresponding dimension, a
!                        value of 2 selects every other element, etc.).
!                        By default, Stride(:) = 1.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Rank-1
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
!       Map:             A vector of integers that specifies the mapping between the
!                        dimensions of a netCDF variable and the in-memory structure
!                        of the internal data array. The elements of the index mapping
!                        vector correspond, in order, to the netCDF variable's dimensions
!                        (Map(1) gives the distance between elements of the internal
!                        array corresponding to the most rapidly varying dimension of
!                        the netCDF variable). Distances between elements are specified
!                        in units of elements.
!                        By default, edgeLengths = SHAPE(values), and
!                                    Map = (/ 1, (PRODUCT(edgeLengths(:i)), &
!                                             i = 1, SIZE(edgeLengths) - 1) /),
!                        that is, there is no mapping.
!                        Use of Fortran-90/95 intrinsic functions (including RESHAPE,
!                        TRANSPOSE, and SPREAD) may let you avoid using this argument.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Rank-1
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
!       Message_Log:     Character string specifying a filename in which any
!                        messages will be logged. If not specified, or if an
!                        error occurs opening the log file, the default action
!                        is to output messages to the screen.
!                        UNITS:      N/A
!                        TYPE:       CHARACTER(*)
!                        DIMENSION:  Scalar
!                        ATTRIBUTES: OPTIONAL, INTENT(IN)
!
! OUTPUT ARGUMENTS:
!       None.
!
! OPTIONAL OUTPUT ARGUMENTS:
!       Variable_ID      NetCDF Id of the requested variable.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Scalar
!                        ATTRIBUTES: OPTIONAL, INTENT(OUT)
!                          
! FUNCTION RESULT
!       Error_Status:    The return value is an integer defining the error status.
!                        The error codes are defined in the Message_Handler module.
!                        If == SUCCESS the netCDF variable write was successful
!                           == FAILURE an unrecoverable error occurred.
!                        UNITS:      N/A
!                        TYPE:       INTEGER
!                        DIMENSION:  Scalar
!
!--------------------------------------------------------------------------------

!Insert_Put_netCDF_Variable




END MODULE netCDF_Variable_Utility

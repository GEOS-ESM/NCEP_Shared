#!/bin/sh
#
# NAME:
#       Concatenate_Coefficients
#
# PURPOSE:
#       Shell script to concatenate SENSOR SpcCoeff and TauCoeff data files
#       based upon a specified SatInfo file. This allows users of the CRTM
#       to create the coefficient data files for their required sensor
#       combinations.
#
# CALLING SEQUENCE:
#       To view a complete list of options, type:
#
#       Concatenate_Coefficients -h
#
# CREATION HISTORY:
#       Written by:     Paul van Delst, CIMSS/SSEC 24-Jul-2003
#                       paul.vandelst@ssec.wisc.edu
#
#  Copyright (C) 2003 Paul van Delst
#
#

usage()
{
  echo
  echo " Usage: Concatenate_Coefficients [-hl] [ -a 1|2|3] [-o 1|2] SatInfo_File"
  echo
  echo "   -h            Print this message and exit"
  echo
  echo "   -l            Use this option to produce LITTLE-endian output files."
  echo "                 The default INTENT is to produce BIG-endian output files."
  echo "                 This option is ignored for non-linux systems."
  echo
  echo "   -a            Use this option to specify the type of coefficient assembly"
  echo "                 to perform. Valid types are:"
  echo "                   1 == only assemble SpcCoeff files."
  echo "                   2 == only assemble TauCoeff files."
  echo "                   3 == assemble both SpcCoeff and TauCoeff files."
  echo "                 Default value is 3."
  echo
  echo "   -o            Use this option to specify the type of output files"
  echo "                 produced. Valid types are:"
  echo "                   1 == netCDF output."
  echo "                   2 == CRTM Binary output."
  echo "                 Default value is 2."
  echo
  echo "   SatInfo_File: ASCII SatInfo file used to determine the indexing"
  echo "                 of the concatenated coefficient files."
  echo
  echo
}

#-------------------------------------------------------------------------------
#                    -- THE SCRIPT NAME FOR ERROR MESSAGES --
#-------------------------------------------------------------------------------

  SCRIPT_NAME="`basename $0`"
  SUCCESS=0
  FAILURE=1
  EXIT_CODE=${SUCCESS}


#-------------------------------------------------------------------------------
#                              -- DEFINE DEFAULTS --
#-------------------------------------------------------------------------------

  # -------------------------------------------
  # Directory definitions
  #
  # *******************************************
  # **  CHANGE THESE FOR USE ON YOUR SYSTEM  **
  # *******************************************
  #
  # The assumed directory structure is:
  #
  #  --+ ${ROOT_DIR}
  #    |
  #    |-- bin
  #    |
  #    `-- CRTM
  #         |
  #         `-- Coefficient_Data
  #
  # but the common parent  of /bin and /CRTM is
  # not necessary. If you wish, you can define
  # EXE_DIR and COEFF_DIR without any reference
  # to ROOT_DIR.
  # -------------------------------------------
  # Root directory
  ROOT_DIR="/u/wx20pd"

  # Executable directory
  EXE_DIR="${ROOT_DIR}/bin"

  # Coefficient data directory
  COEFF_DIR="${ROOT_DIR}/CRTM/Coefficient_Data"

  # ----------------------------------------------
  # Define the OS type and the default endian type
  # suffix. It is an adopted convention IN THIS
  # SCRIPT ONLY that the program,
  #
  #   Assemble_Coefficient_File
  #
  # produces BIG-ENDIAN output. On linux systems
  # a *separate* executable is created called
  #
  #   Assemble_Coefficient_File.little_endian
  #
  # that produces LITTLE-ENDIAN files.
  # ----------------------------------------------
  OS_TYPE=`uname -s`
  ENDIAN=""

  # ---------------------------------
  # Default coefficient assembly type
  # 1 : Assemble SpcCoeff only
  # 2 : Assemble TauCoeff only
  # 3 : Assemble both
  # ---------------------------------
  ASSEMBLY_TYPE=3

  # --------------------------------
  # Set the default output data type
  # 1 : netCDF output
  # 2 : Binary output
  # --------------------------------
  OUTPUT_TYPE=2
  OUTPUT_EXT="bin"


#-------------------------------------------------------------------------------
#                       -- PARSE THE COMMAND LINE OPTIONS --
#-------------------------------------------------------------------------------

  while getopts :hla:o: OPTVAL; do

    # --------------------------------------------
    # If option argument looks like another option
    # exit the loop
    # --------------------------------------------
    case ${OPTARG} in
      -*) break;;
    esac

    # ----------------------------
    # Parse the valid options here
    # ----------------------------
    case ${OPTVAL} in
      l)  if [ ${OS_TYPE} = "Linux" ]; then
            ENDIAN=".little_endian"
          fi;;
      a)  ASSEMBLY_TYPE=${OPTARG}
          if [ ${ASSEMBLY_TYPE} -lt 1 -o ${ASSEMBLY_TYPE} -gt 3 ]; then
            echo; echo "${SCRIPT_NAME}: Invalid assembly type specified."
            usage
            exit ${FAILURE}
          fi;;
      o)  OUTPUT_TYPE=${OPTARG}
          case ${OUTPUT_TYPE} in
            1) OUTPUT_EXT="nc";;
            2) OUTPUT_EXT="bin";;
            *) echo; echo "${SCRIPT_NAME}: Invalid output type specified."
               usage
               exit ${FAILURE};;
          esac;;
      h)  usage
          exit ${SUCCESS};;
      :|\?) OPTVAL=${OPTARG}
            break;;
    esac
  done

  # ----------------------------
  # Remove the options processed
  # ----------------------------
  shift `expr ${OPTIND} - 1`

  # ------------------------------------------
  # Now output invalidities based on OPTVAL
  # Need to do this as getopts does not handle
  # the situations where an option is passed
  # as an argument to another option.
  # ------------------------------------------
  case ${OPTVAL} in

    # --------------------------------------------
    # If OPTVAL contains nothing, then all options
    # have been successfully parsed and all that
    # remains in the argument list is the SatInfo
    # filename
    # --------------------------------------------
    \?) if [ $# -lt 1 ]; then
          echo
          echo "${SCRIPT_NAME}: Missing 'SatInfo_File' argument"
          usage
          exit ${FAILURE}
        fi;;

    # ------------------------------------
    # Valid options, but missing arguments
    # ------------------------------------
    a|o) ( echo; echo "${SCRIPT_NAME}: '-${OPTVAL}' OPTION REQUIRES AN ARGUMENT" ; usage ) | more
         exit ${FAILURE};;

    # --------------
    # Invalid option
    # --------------
    ?) echo; echo "${SCRIPT_NAME}: Invalid option '-${OPTARG}'"
       usage
       exit ${FAILURE};;

  esac

  # --------------------------------
  # Assign the SatInfo file argument
  # --------------------------------
  SATINFO_FILE=$1


#-------------------------------------------------------------------------------
#                   -- CHECK THAT THE VARIOUS FILES EXIST --
#-------------------------------------------------------------------------------
  CHECK_FILES=\
"${EXE_DIR}/Info_SAT2SENSOR "\
"${EXE_DIR}/Assemble_Coefficient_File${ENDIAN} "\
"${COEFF_DIR}/Master.SensorInfo"

  for FILE in ${CHECK_FILES}; do
    if [ ! -f ${FILE} ]; then
      echo; echo "${SCRIPT_NAME}: `basename $FILE` not found in `dirname $FILE`."
      exit ${FAILURE}
    fi
  done


#-------------------------------------------------------------------------------
#              -- CREATE A SensorInfo FILE FROM THE SatInfo INPUT --
#-------------------------------------------------------------------------------
  ${EXE_DIR}/Info_SAT2SENSOR << NoMoreInput
${SATINFO_FILE}
${COEFF_DIR}/Master.SensorInfo
NoMoreInput

SENSORINFO_FILE="${SATINFO_FILE}.SensorInfo"


#-------------------------------------------------------------------------------
#       -- ASSEMBLE THE COEFFICIENTS ACCORDING TO THE SensorInfo FILE --
#-------------------------------------------------------------------------------
  ${EXE_DIR}/Assemble_Coefficient_File${ENDIAN} << NoMoreInput
${SENSORINFO_FILE}
${ASSEMBLY_TYPE}
${OUTPUT_TYPE}
${COEFF_DIR}/
NoMoreInput

  # ----------------------------------
  # Remove the created SensorInfo file
  # ----------------------------------
  rm -f ${SENSORINFO_FILE}


#-------------------------------------------------------------------------------
#                       -- RENAME THE OUTPUT FILES --
#-------------------------------------------------------------------------------

  # ---------------------------------
  # Define the valid output file list
  # ---------------------------------
  case ${ASSEMBLY_TYPE} in
    1) FILE_TYPE_LIST="SpcCoeff";;
    2) FILE_TYPE_LIST="TauCoeff";;
    3) FILE_TYPE_LIST="SpcCoeff TauCoeff";;
  esac

  # -----------------------------------------------
  # Rename the files according to the input SatInfo
  # file and output a directory list.
  # -----------------------------------------------
  echo
  echo " --------------------------"
  echo " Coefficient files created:"
  echo " --------------------------"
  for FILE_TYPE in ${FILE_TYPE_LIST}; do
    INFILE="Concatenated.${FILE_TYPE}.${OUTPUT_EXT}"
    OUTFILE="${SATINFO_FILE}.${FILE_TYPE}.${OUTPUT_EXT}"
    if [ -f ${INFILE} ]; then
      mv ${INFILE} ${OUTFILE}
      ls -laF ${OUTFILE}
    else
      echo; echo "${SCRIPT_NAME}: Concatenated ${FILE_TYPE} file was not created"
      EXIT_CODE=${FAILURE}
    fi
  done

  exit ${EXIT_CODE}

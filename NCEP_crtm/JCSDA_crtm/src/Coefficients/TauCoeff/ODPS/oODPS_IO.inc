!
! Auto-generated by gen_nc.rb, $Revision: 47344 $
!


  ! Function to define the dimensions in a group.

  FUNCTION DefineDimensions( &
    oODPS             , &
    GroupId           , &
    n_Layers_DimId    , &
    n_Levels_DimId    , &
    n_Components_DimId, &
    n_Absorbers_DimId , &
    n_Channels_DimId  , &
    n_Coeffs_DimId    , &
    n_OPIndex_DimId   , &
    n_OCoeffs_DimId   ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(oODPS_type), INTENT(IN)  :: oODPS             
    INTEGER(Long)   , INTENT(IN)  :: GroupId           
    INTEGER(Long)   , INTENT(OUT) :: n_Layers_DimId    
    INTEGER(Long)   , INTENT(OUT) :: n_Levels_DimId    
    INTEGER(Long)   , INTENT(OUT) :: n_Components_DimId
    INTEGER(Long)   , INTENT(OUT) :: n_Absorbers_DimId 
    INTEGER(Long)   , INTENT(OUT) :: n_Channels_DimId  
    INTEGER(Long)   , INTENT(OUT) :: n_Coeffs_DimId    
    INTEGER(Long)   , INTENT(OUT) :: n_OPIndex_DimId   
    INTEGER(Long)   , INTENT(OUT) :: n_OCoeffs_DimId   
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'oODPS_IO::DefineDimensions'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: dimvalue

    ! Setup
    err_stat = SUCCESS

    ! Define the dimensions
    ! ...Number atmospheric layers
    dimvalue = INT(oODPS%n_Layers,Long)
    nf90_stat = NF90_DEF_DIM( groupid,LAYER_DIMNAME,dimvalue,n_Layers_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LAYER_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of atmospheric levels
    dimvalue = INT(oODPS%n_Layers,Long) + 1
    nf90_stat = NF90_DEF_DIM( groupid,LEVEL_DIMNAME,dimvalue,n_Levels_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LEVEL_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of components
    dimvalue = INT(oODPS%n_Components,Long)
    nf90_stat = NF90_DEF_DIM( groupid,COMPONENT_DIMNAME,dimvalue,n_Components_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//COMPONENT_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of absorbers
    dimvalue = INT(oODPS%n_Absorbers,Long)
    nf90_stat = NF90_DEF_DIM( groupid,ABSORBER_DIMNAME,dimvalue,n_Absorbers_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ABSORBER_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of channels
    dimvalue = INT(oODPS%n_Channels,Long)
    nf90_stat = NF90_DEF_DIM( groupid,CHANNEL_DIMNAME,dimvalue,n_Channels_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//CHANNEL_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of ODPS coefficients
    dimvalue = INT(oODPS%n_Coeffs,Long)
    nf90_stat = NF90_DEF_DIM( groupid,COEFF_DIMNAME,dimvalue,n_Coeffs_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//COEFF_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of ODAS predictors
    dimvalue = INT(oODPS%n_OPIndex,Long) + 1   ! Indexing starts from 0
    nf90_stat = NF90_DEF_DIM( groupid,ODASPRED_DIMNAME,dimvalue,n_OPIndex_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ODASPRED_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of ODAS coefficients
    dimvalue = INT(oODPS%n_OCoeffs,Long)
    nf90_stat = NF90_DEF_DIM( groupid,ODASCOEFF_DIMNAME,dimvalue,n_OCoeffs_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ODASCOEFF_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION DefineDimensions

  ! Function to get the dimensions in a group.

  FUNCTION ReadDimensions( &
    GroupId     , &
    n_Layers    , &
    n_Levels    , &
    n_Components, &
    n_Absorbers , &
    n_Channels  , &
    n_Coeffs    , &
    n_OPIndex   , &
    n_OCoeffs   ) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long), INTENT(IN)  :: GroupId     
    INTEGER      , INTENT(OUT) :: n_Layers    
    INTEGER      , INTENT(OUT) :: n_Levels    
    INTEGER      , INTENT(OUT) :: n_Components
    INTEGER      , INTENT(OUT) :: n_Absorbers 
    INTEGER      , INTENT(OUT) :: n_Channels  
    INTEGER      , INTENT(OUT) :: n_Coeffs    
    INTEGER      , INTENT(OUT) :: n_OPIndex   
    INTEGER      , INTENT(OUT) :: n_OCoeffs   
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'oODPS_IO::ReadDimensions'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: dimid
    INTEGER(Long) :: dimvalue

    ! Setup
    err_stat = SUCCESS

    ! Get the group dimensions
    ! ...n_Layers dimension
    nf90_stat = NF90_INQ_DIMID( groupid,LAYER_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//LAYER_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//LAYER_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Layers = dimvalue
    ! ...n_Levels dimension
    nf90_stat = NF90_INQ_DIMID( groupid,LEVEL_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//LEVEL_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//LEVEL_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Levels = dimvalue
    ! ...n_Components dimension
    nf90_stat = NF90_INQ_DIMID( groupid,COMPONENT_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//COMPONENT_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//COMPONENT_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Components = dimvalue
    ! ...n_Absorbers dimension
    nf90_stat = NF90_INQ_DIMID( groupid,ABSORBER_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//ABSORBER_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//ABSORBER_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Absorbers = dimvalue
    ! ...n_Channels dimension
    nf90_stat = NF90_INQ_DIMID( groupid,CHANNEL_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//CHANNEL_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//CHANNEL_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Channels = dimvalue
    ! ...n_Coeffs dimension
    nf90_stat = NF90_INQ_DIMID( groupid,COEFF_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//COEFF_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//COEFF_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Coeffs = dimvalue
    ! ...n_OPIndex dimension
    nf90_stat = NF90_INQ_DIMID( groupid,ODASPRED_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//ODASPRED_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//ODASPRED_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_OPIndex = dimvalue - 1   ! Indexing starts from 0
    ! ...n_OCoeffs dimension
    nf90_stat = NF90_INQ_DIMID( groupid,ODASCOEFF_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//ODASCOEFF_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//ODASCOEFF_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_OCoeffs = dimvalue

  END FUNCTION ReadDimensions

  ! Function to define the variables in a group.

  FUNCTION DefineVariables( &
    GroupId           , &
    n_Layers_DimId    , &
    n_Levels_DimId    , &
    n_Components_DimId, &
    n_Absorbers_DimId , &
    n_Channels_DimId  , &
    n_Coeffs_DimId    , &
    n_OPIndex_DimId   , &
    n_OCoeffs_DimId   ) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long), INTENT(IN) :: GroupId           
    INTEGER(Long), INTENT(IN) :: n_Layers_DimId    
    INTEGER(Long), INTENT(IN) :: n_Levels_DimId    
    INTEGER(Long), INTENT(IN) :: n_Components_DimId
    INTEGER(Long), INTENT(IN) :: n_Absorbers_DimId 
    INTEGER(Long), INTENT(IN) :: n_Channels_DimId  
    INTEGER(Long), INTENT(IN) :: n_Coeffs_DimId    
    INTEGER(Long), INTENT(IN) :: n_OPIndex_DimId   
    INTEGER(Long), INTENT(IN) :: n_OCoeffs_DimId   
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'oODPS_IO::DefineVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid
    INTEGER(Long) :: put_stat(4)

    ! Setup
    err_stat = SUCCESS

    ! Define the variables
    ! ...Group_Index variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      GROUP_INDEX_VARNAME, &
      GROUP_INDEX_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//GROUP_INDEX_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,GROUP_INDEX_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,GROUP_INDEX_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,GROUP_INDEX_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,GROUP_INDEX_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//GROUP_INDEX_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Sensor_Type variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      SENSOR_TYPE_VARNAME, &
      SENSOR_TYPE_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//SENSOR_TYPE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,SENSOR_TYPE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,SENSOR_TYPE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,SENSOR_TYPE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,SENSOR_TYPE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SENSOR_TYPE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Level_Pressure variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      REF_LEVEL_PRESSURE_VARNAME, &
      REF_LEVEL_PRESSURE_TYPE, &
      dimids=(/n_levels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//REF_LEVEL_PRESSURE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,REF_LEVEL_PRESSURE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,REF_LEVEL_PRESSURE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,REF_LEVEL_PRESSURE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,REF_LEVEL_PRESSURE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//REF_LEVEL_PRESSURE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Pressure variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      REF_PRESSURE_VARNAME, &
      REF_PRESSURE_TYPE, &
      dimids=(/n_layers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//REF_PRESSURE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,REF_PRESSURE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,REF_PRESSURE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,REF_PRESSURE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,REF_PRESSURE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//REF_PRESSURE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Temperature variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      REF_TEMPERATURE_VARNAME, &
      REF_TEMPERATURE_TYPE, &
      dimids=(/n_layers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//REF_TEMPERATURE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,REF_TEMPERATURE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,REF_TEMPERATURE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,REF_TEMPERATURE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,REF_TEMPERATURE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//REF_TEMPERATURE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Absorber variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      REF_ABSORBER_VARNAME, &
      REF_ABSORBER_TYPE, &
      dimids=(/n_layers_dimid, n_absorbers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//REF_ABSORBER_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,REF_ABSORBER_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,REF_ABSORBER_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,REF_ABSORBER_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,REF_ABSORBER_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//REF_ABSORBER_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Min_Absorber variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      MIN_ABSORBER_VARNAME, &
      MIN_ABSORBER_TYPE, &
      dimids=(/n_layers_dimid, n_absorbers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//MIN_ABSORBER_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,MIN_ABSORBER_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,MIN_ABSORBER_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,MIN_ABSORBER_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,MIN_ABSORBER_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MIN_ABSORBER_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Max_Absorber variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      MAX_ABSORBER_VARNAME, &
      MAX_ABSORBER_TYPE, &
      dimids=(/n_layers_dimid, n_absorbers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//MAX_ABSORBER_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,MAX_ABSORBER_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,MAX_ABSORBER_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,MAX_ABSORBER_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,MAX_ABSORBER_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MAX_ABSORBER_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Sensor_Channel variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      SENSOR_CHANNEL_VARNAME, &
      SENSOR_CHANNEL_TYPE, &
      dimids=(/n_channels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//SENSOR_CHANNEL_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,SENSOR_CHANNEL_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,SENSOR_CHANNEL_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,SENSOR_CHANNEL_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,SENSOR_CHANNEL_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SENSOR_CHANNEL_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Component_Id variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      COMPONENT_ID_VARNAME, &
      COMPONENT_ID_TYPE, &
      dimids=(/n_components_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//COMPONENT_ID_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,COMPONENT_ID_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,COMPONENT_ID_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,COMPONENT_ID_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,COMPONENT_ID_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//COMPONENT_ID_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Id variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ABSORBER_ID_VARNAME, &
      ABSORBER_ID_TYPE, &
      dimids=(/n_absorbers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ABSORBER_ID_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ABSORBER_ID_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ABSORBER_ID_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ABSORBER_ID_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ABSORBER_ID_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ABSORBER_ID_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Predictors variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      N_PREDICTORS_VARNAME, &
      N_PREDICTORS_TYPE, &
      dimids=(/n_components_dimid, n_channels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//N_PREDICTORS_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,N_PREDICTORS_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,N_PREDICTORS_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,N_PREDICTORS_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,N_PREDICTORS_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//N_PREDICTORS_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Pos_Index variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      POS_INDEX_VARNAME, &
      POS_INDEX_TYPE, &
      dimids=(/n_components_dimid, n_channels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//POS_INDEX_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,POS_INDEX_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,POS_INDEX_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,POS_INDEX_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,POS_INDEX_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//POS_INDEX_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...C variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ODPS_COEFFICIENTS_VARNAME, &
      ODPS_COEFFICIENTS_TYPE, &
      dimids=(/n_coeffs_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ODPS_COEFFICIENTS_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ODPS_COEFFICIENTS_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ODPS_COEFFICIENTS_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ODPS_COEFFICIENTS_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ODPS_COEFFICIENTS_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ODPS_COEFFICIENTS_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ALPHA_VARNAME, &
      ALPHA_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ALPHA_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ALPHA_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ALPHA_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ALPHA_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ALPHA_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ALPHA_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha_C1 variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ALPHA_C1_VARNAME, &
      ALPHA_C1_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ALPHA_C1_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ALPHA_C1_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ALPHA_C1_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ALPHA_C1_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ALPHA_C1_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ALPHA_C1_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha_C2 variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ALPHA_C2_VARNAME, &
      ALPHA_C2_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ALPHA_C2_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ALPHA_C2_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ALPHA_C2_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ALPHA_C2_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ALPHA_C2_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ALPHA_C2_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OComponent_Index variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      OCOMPONENT_INDEX_VARNAME, &
      OCOMPONENT_INDEX_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//OCOMPONENT_INDEX_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,OCOMPONENT_INDEX_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,OCOMPONENT_INDEX_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,OCOMPONENT_INDEX_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,OCOMPONENT_INDEX_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OCOMPONENT_INDEX_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OSignificance variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      OSIGNIFICANCE_VARNAME, &
      OSIGNIFICANCE_TYPE, &
      dimids=(/n_channels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//OSIGNIFICANCE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,OSIGNIFICANCE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,OSIGNIFICANCE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,OSIGNIFICANCE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,OSIGNIFICANCE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OSIGNIFICANCE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Order variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ORDER_VARNAME, &
      ORDER_TYPE, &
      dimids=(/n_channels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ORDER_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ORDER_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ORDER_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ORDER_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ORDER_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ORDER_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OP_Index variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      OP_Index_VARNAME, &
      OP_Index_TYPE, &
      dimids=(/n_opindex_dimid, n_channels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//OP_Index_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,OP_Index_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,OP_Index_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,OP_Index_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,OP_Index_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OP_Index_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OPos_Index variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      OPOS_INDEX_VARNAME, &
      OPOS_INDEX_TYPE, &
      dimids=(/n_channels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//OPOS_INDEX_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,OPOS_INDEX_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,OPOS_INDEX_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,OPOS_INDEX_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,OPOS_INDEX_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OPOS_INDEX_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OC variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ODAS_Coefficients_VARNAME, &
      ODAS_Coefficients_TYPE, &
      dimids=(/n_ocoeffs_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ODAS_Coefficients_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ODAS_Coefficients_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ODAS_Coefficients_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ODAS_Coefficients_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ODAS_Coefficients_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ODAS_Coefficients_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION DefineVariables

  ! Function to read the variables from a group.

  FUNCTION ReadVariables( &
    oODPS  , &
    GroupId) &
  RESULT( err_stat )
    ! Arguments
    TYPE(oODPS_type), INTENT(IN OUT) :: oODPS  
    INTEGER(Long)   , INTENT(IN)     :: GroupId
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'oODPS_IO::ReadVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid

    ! Setup
    err_stat = SUCCESS

    ! Read the oODPS data
    ! ...Group_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,GROUP_INDEX_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//GROUP_INDEX_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Group_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//GROUP_INDEX_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Sensor_Type variable
    nf90_stat = NF90_INQ_VARID( groupid,SENSOR_TYPE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SENSOR_TYPE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Sensor_Type )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//SENSOR_TYPE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Level_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,REF_LEVEL_PRESSURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//REF_LEVEL_PRESSURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Ref_Level_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//REF_LEVEL_PRESSURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,REF_PRESSURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//REF_PRESSURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Ref_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//REF_PRESSURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,REF_TEMPERATURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//REF_TEMPERATURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Ref_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//REF_TEMPERATURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,REF_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//REF_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Ref_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//REF_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Min_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,MIN_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MIN_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Min_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//MIN_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Max_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,MAX_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MAX_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Max_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//MAX_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Sensor_Channel variable
    nf90_stat = NF90_INQ_VARID( groupid,SENSOR_CHANNEL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SENSOR_CHANNEL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Sensor_Channel )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//SENSOR_CHANNEL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Component_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,COMPONENT_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//COMPONENT_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Component_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//COMPONENT_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,ABSORBER_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ABSORBER_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Absorber_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ABSORBER_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Predictors variable
    nf90_stat = NF90_INQ_VARID( groupid,N_PREDICTORS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//N_PREDICTORS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%n_Predictors )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//N_PREDICTORS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Pos_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,POS_INDEX_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//POS_INDEX_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Pos_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//POS_INDEX_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...C variable
    nf90_stat = NF90_INQ_VARID( groupid,ODPS_COEFFICIENTS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ODPS_COEFFICIENTS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%C )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ODPS_COEFFICIENTS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha variable
    nf90_stat = NF90_INQ_VARID( groupid,ALPHA_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ALPHA_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Alpha )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ALPHA_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha_C1 variable
    nf90_stat = NF90_INQ_VARID( groupid,ALPHA_C1_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ALPHA_C1_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Alpha_C1 )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ALPHA_C1_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha_C2 variable
    nf90_stat = NF90_INQ_VARID( groupid,ALPHA_C2_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ALPHA_C2_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Alpha_C2 )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ALPHA_C2_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OComponent_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,OCOMPONENT_INDEX_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OCOMPONENT_INDEX_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%OComponent_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//OCOMPONENT_INDEX_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OSignificance variable
    nf90_stat = NF90_INQ_VARID( groupid,OSIGNIFICANCE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OSIGNIFICANCE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%OSignificance )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//OSIGNIFICANCE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Order variable
    nf90_stat = NF90_INQ_VARID( groupid,ORDER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ORDER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%Order )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ORDER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OP_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,OP_Index_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OP_Index_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%OP_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//OP_Index_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OPos_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,OPOS_INDEX_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OPOS_INDEX_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%OPos_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//OPOS_INDEX_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OC variable
    nf90_stat = NF90_INQ_VARID( groupid,ODAS_Coefficients_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ODAS_Coefficients_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,oODPS%OC )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ODAS_Coefficients_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION ReadVariables

  ! Function to write the variables in a group.

  FUNCTION WriteVariables( &
    oODPS  , &
    GroupId) &
  RESULT( err_stat )
    ! Arguments
    TYPE(oODPS_type), INTENT(IN) :: oODPS  
    INTEGER(Long)   , INTENT(IN) :: GroupId
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'oODPS_IO::WriteVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid

    ! Setup
    err_stat = SUCCESS

    ! Write the variables
    ! ...Group_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,GROUP_INDEX_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//GROUP_INDEX_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Group_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//GROUP_INDEX_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Sensor_Type variable
    nf90_stat = NF90_INQ_VARID( groupid,SENSOR_TYPE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SENSOR_TYPE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Sensor_Type )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SENSOR_TYPE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Level_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,REF_LEVEL_PRESSURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//REF_LEVEL_PRESSURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Ref_Level_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//REF_LEVEL_PRESSURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,REF_PRESSURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//REF_PRESSURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Ref_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//REF_PRESSURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,REF_TEMPERATURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//REF_TEMPERATURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Ref_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//REF_TEMPERATURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Ref_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,REF_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//REF_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Ref_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//REF_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Min_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,MIN_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MIN_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Min_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MIN_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Max_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,MAX_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MAX_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Max_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MAX_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Sensor_Channel variable
    nf90_stat = NF90_INQ_VARID( groupid,SENSOR_CHANNEL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SENSOR_CHANNEL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Sensor_Channel )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SENSOR_CHANNEL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Component_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,COMPONENT_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//COMPONENT_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Component_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//COMPONENT_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,ABSORBER_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ABSORBER_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Absorber_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ABSORBER_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Predictors variable
    nf90_stat = NF90_INQ_VARID( groupid,N_PREDICTORS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//N_PREDICTORS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%n_Predictors )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//N_PREDICTORS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Pos_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,POS_INDEX_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//POS_INDEX_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Pos_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//POS_INDEX_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...C variable
    nf90_stat = NF90_INQ_VARID( groupid,ODPS_COEFFICIENTS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ODPS_COEFFICIENTS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%C )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ODPS_COEFFICIENTS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha variable
    nf90_stat = NF90_INQ_VARID( groupid,ALPHA_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ALPHA_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Alpha )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ALPHA_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha_C1 variable
    nf90_stat = NF90_INQ_VARID( groupid,ALPHA_C1_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ALPHA_C1_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Alpha_C1 )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ALPHA_C1_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Alpha_C2 variable
    nf90_stat = NF90_INQ_VARID( groupid,ALPHA_C2_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ALPHA_C2_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Alpha_C2 )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ALPHA_C2_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OComponent_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,OCOMPONENT_INDEX_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OCOMPONENT_INDEX_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%OComponent_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OCOMPONENT_INDEX_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OSignificance variable
    nf90_stat = NF90_INQ_VARID( groupid,OSIGNIFICANCE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OSIGNIFICANCE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%OSignificance )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OSIGNIFICANCE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Order variable
    nf90_stat = NF90_INQ_VARID( groupid,ORDER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ORDER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%Order )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ORDER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OP_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,OP_Index_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OP_Index_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%OP_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OP_Index_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OPos_Index variable
    nf90_stat = NF90_INQ_VARID( groupid,OPOS_INDEX_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OPOS_INDEX_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%OPos_Index )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OPOS_INDEX_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OC variable
    nf90_stat = NF90_INQ_VARID( groupid,ODAS_Coefficients_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ODAS_Coefficients_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,oODPS%OC )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ODAS_Coefficients_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION WriteVariables

  ! Function to read the global/group attributes.

  FUNCTION ReadGAtts( &
    ncid            , &
    Release         , &
    Version         , &
    Title           , &
    History         , &
    Comment         , &
    Sensor_Id       , &
    Algorithm       , &
    WMO_Satellite_Id, &
    WMO_Sensor_Id   , &
    Profile_Set_Id  ) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long),           INTENT(IN)  :: ncid            
    INTEGER      , OPTIONAL, INTENT(OUT) :: Release         
    INTEGER      , OPTIONAL, INTENT(OUT) :: Version         
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: Title           
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: History         
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: Comment         
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: Sensor_Id       
    INTEGER      , OPTIONAL, INTENT(OUT) :: Algorithm       
    INTEGER      , OPTIONAL, INTENT(OUT) :: WMO_Satellite_Id
    INTEGER      , OPTIONAL, INTENT(OUT) :: WMO_Sensor_Id   
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: Profile_Set_Id  
    ! Function result
    INTEGER :: err_stat
    ! Local parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'oODPS_IO::ReadGAtts'
    ! Local variables
    CHARACTER(ML)   :: msg
    CHARACTER(256)  :: gattname
    CHARACTER(5000) :: gattstring
    INTEGER(Long) :: nf90_stat

    ! Set up
    err_stat = SUCCESS

    ! The global attributes
    ! ...The Release
    IF ( PRESENT(Release) ) THEN
      gattname = RELEASE_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Release )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Version
    IF ( PRESENT(Version) ) THEN
      gattname = VERSION_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Version )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Title
    IF ( PRESENT(Title) ) THEN
      gattname = TITLE_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Title = gattstring(1:MIN(LEN(Title), LEN_TRIM(gattstring)))
    END IF
    ! ...The History
    IF ( PRESENT(History) ) THEN
      gattname = HISTORY_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      History = gattstring(1:MIN(LEN(History), LEN_TRIM(gattstring)))
    END IF
    ! ...The Comment
    IF ( PRESENT(Comment) ) THEN
      gattname = COMMENT_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Comment = gattstring(1:MIN(LEN(Comment), LEN_TRIM(gattstring)))
    END IF
    ! ...The Sensor_Id
    IF ( PRESENT(Sensor_Id) ) THEN
      gattname = SENSOR_ID_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Sensor_Id = gattstring(1:MIN(LEN(Sensor_Id), LEN_TRIM(gattstring)))
    END IF
    ! ...The Algorithm
    IF ( PRESENT(Algorithm) ) THEN
      gattname = ALGORITHM_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Algorithm )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The WMO_Satellite_Id
    IF ( PRESENT(WMO_Satellite_Id) ) THEN
      gattname = WMO_SATELLITE_ID_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),WMO_Satellite_Id )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The WMO_Sensor_Id
    IF ( PRESENT(WMO_Sensor_Id) ) THEN
      gattname = WMO_SENSOR_ID_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),WMO_Sensor_Id )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Profile_Set_Id
    IF ( PRESENT(Profile_Set_Id) ) THEN
      gattname = PROFILE_SET_ID_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR .AND. nf90_stat /= NF90_ENOTATT ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Profile_Set_Id = gattstring(1:MIN(LEN(Profile_Set_Id), LEN_TRIM(gattstring)))
    END IF

  END FUNCTION ReadGAtts

  ! Function to write the global/group attributes.

  FUNCTION WriteGAtts( &
    ncid            , &
    Release         , &
    Version         , &
    Title           , &
    History         , &
    Comment         , &
    Sensor_Id       , &
    Algorithm       , &
    WMO_Satellite_Id, &
    WMO_Sensor_Id   , &
    Profile_Set_Id  ) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long),           INTENT(IN) :: ncid            
    INTEGER      , OPTIONAL, INTENT(IN) :: Release         
    INTEGER      , OPTIONAL, INTENT(IN) :: Version         
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: Title           
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: History         
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: Comment         
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: Sensor_Id       
    INTEGER      , OPTIONAL, INTENT(IN) :: Algorithm       
    INTEGER      , OPTIONAL, INTENT(IN) :: WMO_Satellite_Id
    INTEGER      , OPTIONAL, INTENT(IN) :: WMO_Sensor_Id   
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: Profile_Set_Id  
    ! Function result
    INTEGER :: err_stat
    ! Local parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'oODPS_IO::WriteGAtts'
    CHARACTER(*), PARAMETER :: WRITE_MODULE_HISTORY_GATTNAME   = 'write_module_history'
    CHARACTER(*), PARAMETER :: CREATION_DATE_AND_TIME_GATTNAME = 'creation_date_and_time'
    ! Local variables
    CHARACTER(ML) :: msg
    CHARACTER(ML) :: gattname
    CHARACTER(8)  :: cdate
    CHARACTER(10) :: ctime
    CHARACTER(5)  :: czone
    INTEGER(Long) :: nf90_stat

    ! Set up
    err_stat = SUCCESS
    msg = ''

    ! Mandatory global attributes
    ! ...Software ID
    gattname = WRITE_MODULE_HISTORY_GATTNAME
    nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),MODULE_VERSION_ID )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
            TRIM(NF90_STRERROR( nf90_stat ) )
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Creation date
    CALL DATE_AND_TIME( cdate, ctime, czone )
    gattname = CREATION_DATE_AND_TIME_GATTNAME
    nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname), &
                              cdate(1:4)//'/'//cdate(5:6)//'/'//cdate(7:8)//', '// &
                              ctime(1:2)//':'//ctime(3:4)//':'//ctime(5:6)//' '// &
                              czone//'UTC' )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
            TRIM(NF90_STRERROR( nf90_stat ) )
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF


    ! Optional global attributes
    ! ...The Release
    IF ( PRESENT(Release) ) THEN
      gattname = RELEASE_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Release )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Version
    IF ( PRESENT(Version) ) THEN
      gattname = VERSION_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Version )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Title
    IF ( PRESENT(Title) ) THEN
      gattname = TITLE_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Title )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The History
    IF ( PRESENT(History) ) THEN
      gattname = HISTORY_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),History )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Comment
    IF ( PRESENT(Comment) ) THEN
      gattname = COMMENT_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Comment )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Sensor_Id
    IF ( PRESENT(Sensor_Id) ) THEN
      gattname = SENSOR_ID_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Sensor_Id )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Algorithm
    IF ( PRESENT(Algorithm) ) THEN
      gattname = ALGORITHM_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Algorithm )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The WMO_Satellite_Id
    IF ( PRESENT(WMO_Satellite_Id) ) THEN
      gattname = WMO_SATELLITE_ID_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),WMO_Satellite_Id )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The WMO_Sensor_Id
    IF ( PRESENT(WMO_Sensor_Id) ) THEN
      gattname = WMO_SENSOR_ID_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),WMO_Sensor_Id )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Profile_Set_Id
    IF ( PRESENT(Profile_Set_Id) ) THEN
      gattname = PROFILE_SET_ID_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Profile_Set_Id )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF

  END FUNCTION WriteGAtts

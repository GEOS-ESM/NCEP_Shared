LBLRTM I/O library v0.1.0 Build Instructions
============================================

$Revision: 35194 $


CRTM SUPPORT EMAIL: ncep.list.emc.jcsda_crtm.support@noaa.gov

If you have problems building the library please include the
generated "config.log" file in your email correspondence.



            Contents
  ===============================
  1. Configuration
  2. Building the library
  3. Testing the library
  4. Installing the library
  5. Linking to the library
  6. Uninstalling the library
  7. Cleaning up
  8. Feedback and contact info




1. CONFIGURATION
================

The LBLRTM I/O tarball directory structure looks like:
 ./
  |-README  .................. this file
  |-configure  ............... configuration script
  |-Makefile.in  ............. makefile template
  `-libsrc/  ................. library source files

The build system for the LBLRTM I/O library uses an autoconf-generated
configure script.

You run the configuration script like so:

  $ ./configure --prefix=<install directory>

JR start
This command ASSUMES that the env. var. $NETCDF_DIR has been set to the location where 
netcdf-fortran and netcdf-c libraries are installed.

Also IMPORTANT: The default build is configured assuming the calling application uses
8-byte reals and 4-byte integers. That is the current status of apps under CRTM_coef.
BUT, "make check" will fail here after a successful library build, presumably due to
an input dataset built with 8-byte reals and 8-byte integers. If you want "make check"
to succeed, just change configure.ac appropriately for 8-byte reals and 8-byte integers.
Settings for both -DINT_SIZE and compiler flags (e.g. -fdefault-integer-8) will need to
be set before running "autoreconf -i".
JR end

The --prefix switch sets the installation directory and defaults to /usr/local so
make sure you set it to a directory in which you have write access.

By default, the LBLRTM I/O library is set to read file generated from a double-precision
LBLRTM executable (what is used in the CRTM project by default). If you want to read
datafiles from a "standard" single precision LBLRTM executable, it needs to be enabled
in the configuration:

  $ ./configure --enable-single --prefix=<install directory>




2. BUILDING THE LIBRARY
=======================

To start the library build, simply type

  $ make




3. CHECKING THE LIBRARY BUILD
=============================

To run the accompanying tests using the just-built library, simply type

  $ make check

This will build and run any tests. The current output from the (successful)
test runs looks like:

    ========================================
      Running test...


         **********************************************************
                               check_lblrtmio

          Check/example program for the LBLRTM File I/O functions
          using

          LBLRTM I/O library version: v0.1.0
         **********************************************************


         Test reading a single layer, single panel LBLRTM file...

     LBLRTM_Utility::File_Open(INFORMATION) : Set for DOUBLE-precision LBLRTM files
     LBLRTM_File_IO::Read(INFORMATION) : Reading layer #1...
     LBLRTM_Layer_IO::Read(INFORMATION) :   Reading spectral chunk #1...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #1...
     LBLRTM_Layer_IO::Read(INFORMATION) :   Reading spectral chunk #2...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #1...

     ...etc...

          Test reading a single layer, double panel LBLRTM file...

     LBLRTM_Utility::File_Open(INFORMATION) : Set for DOUBLE-precision LBLRTM files
     LBLRTM_File_IO::Read(INFORMATION) : Reading layer #1...
     LBLRTM_Layer_IO::Read(INFORMATION) :   Reading spectral chunk #1...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #1...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #2...
     LBLRTM_Layer_IO::Read(INFORMATION) :   Reading spectral chunk #2...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #1...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #2...

     ...etc...

         Test reading some layers from a multiple layer, double panel LBLRTM file...

     LBLRTM_Utility::File_Open(INFORMATION) : Set for DOUBLE-precision LBLRTM files
     LBLRTM_File_IO::Read(INFORMATION) : Reading layer #1...
     LBLRTM_Layer_IO::Read(INFORMATION) :   Reading spectral chunk #1...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #1...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #2...
     LBLRTM_Layer_IO::Read(INFORMATION) :   Reading spectral chunk #2...
     LBLRTM_File_IO::Read(INFORMATION) : Reading layer #2...
     LBLRTM_Layer_IO::Read(INFORMATION) :   Reading spectral chunk #1...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #1...
     LBLRTM_Panel_IO::Read(INFORMATION) :     Reading spectrum #2...

     ...etc...

      TEST SUCCESSFUL!

    ========================================




4. INSTALLING THE LIBRARY
=========================

To install the library, type:

  $ make install

Installation of the library *always* occurs into its own directory within the
directory specified by the --prefix switch. The name of the installation
directory follows the convention:

  <library name>_<version>

So, if a library version (say, v1.0.0) build was configured with --prefix=$PWD
then the installation directory will be

  ${PWD}/lblrtmio_v1.0.0




5. LINKING TO THE LIBRARY
=========================

Let's assume the above install was moved into "${HOME}/local". To use the
library in your own application, the usual environment variables would be
modified something like:

  libroot="${HOME}/local/lblrtmio_v1.0.0"
  FCFLAGS="-I${libroot}/include ${FCFLAGS}"
  LDFLAGS="-L${libroot}/lib ${LDFLAGS}"
  LIBS="-llblrtmio"

(with appropriate syntax changes for csh)




6. UNINSTALLING THE LIBRARY
===========================

To uninstall the library (assuming you haven't moved the installation directory
contents somewhere else) you can type:

  $ make uninstall

This will DELETE the created installation directory. So, for a library version,
say, v1.0.0, if your configure script invocation was something like

  $ ./configure --prefix=${PWD} ...other command line arguments...

then the "uninstall" target will delete the "${PWD}/lblrtmio_v1.0.0" directory.




7. CLEANING UP
==============

Two targets are provided for cleaning up after the build. To remove all the
build products type

  $ make clean

To also remove all the configuration products (i.e. the makefiles) type

  $ make distclean




7. FEEDBACK AND CONTACT INFO
============================

That's pretty much it. Any questions or bug reports can be sent to CRTM Support.

  CRTM SUPPORT EMAIL: ncep.list.emc.jcsda_crtm.support@noaa.gov

If you have problems building the library please include the generated "config.log"
file in your email correspondence.

#!/bin/sh

#-------------------------------------------------------------------------------
#                        -- USAGE DESCRIPTION FUNCTION --
#-------------------------------------------------------------------------------

usage()
{
  echo
  echo " Usage: Check_LBL_Run_Completion [-h]"
  echo "                                 [-a angle_begin[:angle_end]]"
  echo "                                 [-p profile_begin[:profile_end]]"
  echo "                                 [-t TAPE3_index_list]"
  echo
  echo "   -h           Print this message and exit"
  echo
  echo "   -a           Use this option to specify the begin and end angle limits"
  echo "                for checking."
  echo "                Valid values are:"
  echo "                  1 == SEC(z)=1.00, z= 0.000"
  echo "                  2 == SEC(z)=1.25, z=36.870"
  echo "                  3 == SEC(z)=1.50, z=48.190"
  echo "                  4 == SEC(z)=1.75, z=55.150"
  echo "                  5 == SEC(z)=2.00, z=60.000"
  echo "                  6 == SEC(z)=2.25, z=63.612"
  echo "                  7 == SEC(z)=3.00, z=70.529"
  echo "                Default action is determined by defaults file."
  echo
  echo "   -p           Use this option to specify the begin and end profile limits"
  echo "                for checking."
  echo "                Default action is determined by defaults file."
  echo
  echo "   -t           Use this option to specify the LBLRTM TAPE3 index list"
  echo "                to process."
  echo "                Valid TAPE3 indices are:"
  echo "                   1-7 == individual molecule numbers (no continua)"
  echo "                   8   == all first seven molecules (no continua)"
  echo "                   9   == continua only"
  echo "                  10   == all first seven molecules (and their continua)"
  echo "                  11   == water vapor + ozone only (and their continua)"
  echo "                  12   == water vapor only (and it's continua)"
  echo "                  13   == dry gases. Everything but h2o and o3 (and their continua)"
  echo "                  14   == ozone only (and it's continua)"
  echo "                  15   == water vapor continua only"
  echo "                If specifying more than one index, the list *must* be enclosed"
  echo "                in quotes."
  echo "                Default action is determined by defaults file."
  echo
}



#-------------------------------------------------------------------------------
#                              -- DEFINE DEFAULTS --
#-------------------------------------------------------------------------------

  # -- Defaults file and required quantities
  DEFAULTS_FILE="Transmittance_Production.processing_defaults"
  DEFAULTS_LIST="TAPE3_LIST PROFILE1 PROFILE2 ANGLE1 ANGLE2"

  # -- Check existence of defaults file
  if [ ! -f ${DEFAULTS_FILE} ]; then
    echo "${DEFAULTS_FILE} file not found."
    exit 1
  fi

  # -- Get defaults from file
  for ITEM_NAME in ${DEFAULTS_LIST}; do

    ITEM_VALUE=`grep ":${ITEM_NAME}:" ${DEFAULTS_FILE} | cut -d":" -f3`

    case "${ITEM_NAME}" in

      # -- The TAPE3 list
      TAPE3_LIST) TAPE3_LIST=${ITEM_VALUE};;

      # -- Default PROFILE limits and ID
      PROFILE1) PROFILE1=${ITEM_VALUE};;
      PROFILE2) PROFILE2=${ITEM_VALUE};;

      # -- Default zenith angle limits
      ANGLE1) ANGLE1=${ITEM_VALUE};;
      ANGLE2) ANGLE2=${ITEM_VALUE};;

      *) ;; # Ignore invalid default
    esac

  done



#-------------------------------------------------------------------------------
#                       -- PARSE THE COMMAND LINE OPTIONS --
#-------------------------------------------------------------------------------

  while getopts :ha:p:t: OPTVAL; do


    # --------------------------------------------
    # If option argument looks like another option
    # exit the loop
    # --------------------------------------------

    case ${OPTARG} in
      -*) break;;
    esac


    # ----------------------------
    # Parse the valid options here
    # ----------------------------

    case ${OPTVAL} in
      a)  ANGLE_LIMITS=${OPTARG}
          ANGLE1=`echo ${ANGLE_LIMITS} | cut -d: -f1`
          ANGLE2=`echo ${ANGLE_LIMITS} | cut -d: -f2`;;
      p)  PROFILE_LIMITS=${OPTARG}
          PROFILE1=`echo ${PROFILE_LIMITS} | cut -d: -f1`
          PROFILE2=`echo ${PROFILE_LIMITS} | cut -d: -f2`;;
      t)  TAPE3_LIST=${OPTARG};;
      h)  usage
          exit 0;;
      :|\?) OPTVAL=${OPTARG}
            break;;
    esac

  done


  # ----------------------------
  # Remove the options processed
  # ----------------------------

  shift `expr ${OPTIND} - 1`


  # ------------------------------------------
  # Now output invalidities based on OPTVAL
  # Need to do this as getopts does not handle
  # the situations where an option is passed
  # as an argument to another option.
  # ------------------------------------------

  case ${OPTVAL} in


    # --------------------------------------------
    # If OPTVAL contains nothing, then all options
    # have been successfully parsed
    # --------------------------------------------

    \?) if [ $# -ne 0 ]; then
          ( echo " Invalid argument(s) $*" ; usage ) | more
          #usage | more
          exit 2
        fi;;


    # ------------------------------------
    # Valid options, but missing arguments
    # ------------------------------------

    a|p|t) ( echo " '-${OPTVAL}' option requires an argument" ; usage ) | more
                 exit 2;;


    # --------------
    # Invalid option
    # --------------

    ?) ( echo " Invalid option '-${OPTARG}'" ; usage ) | more
       exit 2;;

  esac



#-------------------------------------------------------------------------------
#                        -- CHECK THE TauSpc RUN STATUS --
#-------------------------------------------------------------------------------

  # Loop over profiles
  # ------------------
  PROFILE=${PROFILE1}
  while [ ${PROFILE} -le ${PROFILE2} ]; do

    # Construct the profile tag
    if [ ${PROFILE} -lt 10 ]; then
      PROFILE_TAG="profile0${PROFILE}"
    else
      PROFILE_TAG="profile${PROFILE}"
    fi

    echo " Profile ${PROFILE} incomplete runs:"

    # Initialise incomplete counter
    N_INCOMPLETE=0


    # Loop over angles
    # ----------------
    ANGLE=${ANGLE1}
    while [ ${ANGLE} -le ${ANGLE2} ]; do

      # Construct the angle tag
      ANGLE_TAG="angle${ANGLE}"


      # Loop over molecule sets
      # -----------------------
      for MOLECULE in ${TAPE3_LIST}; do

        # Construct the molecule tag
        MOLECULE_TAG=`Define_Molecule_Tag ${MOLECULE}`
        if [ $? -ne 0 ]; then
          echo "Error constructing molecule tag name for molecule index ${MOLECULE}"
          exit 2
        fi

        # Construct a root directory name
        ROOT_DIR="${PROFILE_TAG}/${ANGLE_TAG}/${MOLECULE_TAG}"

        # Count the band directories
        N_BAND_DIRS=`ls -d ${ROOT_DIR}/band* 2>/dev/null | wc -l`
        N_BAND_DIRS=`expr ${N_BAND_DIRS} + 1 - 1`

        # Count the signal files
        N_UP_FILES=`ls ${ROOT_DIR}/band*/upwelling_tau.*.signal 2>/dev/null | wc -l`
        N_UP_FILES=`expr ${N_UP_FILES} + 1 - 1`

        N_DOWN_FILES=`ls ${ROOT_DIR}/band*/downwelling_tau.*.signal 2>/dev/null | wc -l`
        N_DOWN_FILES=`expr ${N_DOWN_FILES} + 1 - 1`

        # Output the count
        if [ ${N_UP_FILES} -ne ${N_BAND_DIRS} -o ${N_DOWN_FILES} -ne ${N_BAND_DIRS} ]; then
          echo "${PROFILE_TAG}, ${ANGLE_TAG}, ${MOLECULE_TAG}-  n_Bands: ${N_BAND_DIRS},  Up: ${N_UP_FILES}  Down: ${N_DOWN_FILES}  <--- Incomplete"
          N_INCOMPLETE=`expr ${N_INCOMPLETE} + 1`
        fi

      done

      # Increment the angle number
      ANGLE=`expr ${ANGLE} + 1`

    done

    # Increment the profile number
    PROFILE=`expr ${PROFILE} + 1`

    # Output message
    if [ ${N_INCOMPLETE} -eq 0 ]; then
      echo "   All runs completed!"
    fi
    
  done

